{"created": 1755364015.1146147, "duration": 0.9939236640930176, "exitcode": 1, "root": "/workspaces/agentic-ecosystem", "environment": {}, "summary": {"failed": 7, "passed": 1, "total": 8, "collected": 8}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/test_architect_agent.py", "type": "Module"}]}, {"nodeid": "tests/test_architect_agent.py::TestArchitectAgent", "outcome": "passed", "result": [{"nodeid": "tests/test_architect_agent.py::TestArchitectAgent::test_design_system_architecture_basic", "type": "Coroutine", "lineno": 63}, {"nodeid": "tests/test_architect_agent.py::TestArchitectAgent::test_architecture_component_types", "type": "Function", "lineno": 164}, {"nodeid": "tests/test_architect_agent.py::TestArchitectAgent::test_technology_stack_consistency", "type": "Function", "lineno": 192}, {"nodeid": "tests/test_architect_agent.py::TestArchitectAgent::test_security_considerations_coverage", "type": "Function", "lineno": 238}, {"nodeid": "tests/test_architect_agent.py::TestArchitectAgent::test_data_flow_completeness", "type": "Function", "lineno": 274}, {"nodeid": "tests/test_architect_agent.py::TestArchitectAgent::test_architecture_file_output", "type": "Function", "lineno": 321}, {"nodeid": "tests/test_architect_agent.py::TestArchitectAgent::test_architecture_patterns_validation", "type": "Function", "lineno": 349}, {"nodeid": "tests/test_architect_agent.py::TestArchitectAgent::test_error_handling", "type": "Function", "lineno": 395}]}, {"nodeid": "tests/test_architect_agent.py", "outcome": "passed", "result": [{"nodeid": "tests/test_architect_agent.py::TestArchitectAgent", "type": "Class"}]}], "tests": [{"nodeid": "tests/test_architect_agent.py::TestArchitectAgent::test_design_system_architecture_basic", "lineno": 63, "outcome": "failed", "keywords": ["test_design_system_architecture_basic", "asyncio", "pytestmark", "TestArchitectAgent", "test_architect_agent.py", "tests", "agentic-ecosystem", ""], "setup": {"duration": 0.0010555080002632167, "outcome": "passed"}, "call": {"duration": 0.004645729999992909, "outcome": "failed", "crash": {"path": "/workspaces/agentic-ecosystem/tests/test_architect_agent.py", "lineno": 142, "message": "AssertionError: assert 'architecture_patterns' in {'complexity_analysis': 'complex', 'components': [{'name': 'Frontend Application', 'responsibility': 'User interface and client-side logic', 'technology': 'React.js'}, {'name': 'Backend API', 'responsibility': 'Business logic and data processing', 'technology': 'Node.js'}, {'name': 'Database', 'responsibility': 'Data storage and retrieval', 'technology': 'PostgreSQL'}], 'created_at': '2025-08-16T17:06:54.984532', 'created_by': 'architect_agent', ...}"}, "traceback": [{"path": "tests/test_architect_agent.py", "lineno": 142, "message": "in test_design_system_architecture_basic"}], "stdout": "LLM Response received: 1610 characters\nCleaned content preview: {\"components\": [{\"name\": \"User Authentication Service\", \"type\": \"microservice\", \"description\": \"Handles user registration, login, and authentication\", \"technologies\": [\"Node.js\", \"JWT\", \"bcrypt\"], \"re...\nLLM call failed: Invalid LLM response format - missing technology_stack\nLLM error type: ValueError\n", "longrepr": "tests/test_architect_agent.py:142: in test_design_system_architecture_basic\n    assert \"architecture_patterns\" in result\nE   AssertionError: assert 'architecture_patterns' in {'complexity_analysis': 'complex', 'components': [{'name': 'Frontend Application', 'responsibility': 'User interface and client-side logic', 'technology': 'React.js'}, {'name': 'Backend API', 'responsibility': 'Business logic and data processing', 'technology': 'Node.js'}, {'name': 'Database', 'responsibility': 'Data storage and retrieval', 'technology': 'PostgreSQL'}], 'created_at': '2025-08-16T17:06:54.984532', 'created_by': 'architect_agent', ...}"}, "teardown": {"duration": 0.0010218350003015075, "outcome": "passed"}}, {"nodeid": "tests/test_architect_agent.py::TestArchitectAgent::test_architecture_component_types", "lineno": 164, "outcome": "failed", "keywords": ["test_architecture_component_types", "TestArchitectAgent", "test_architect_agent.py", "tests", "agentic-ecosystem", ""], "setup": {"duration": 0.0029197530002420535, "outcome": "passed"}, "call": {"duration": 0.004538591999789787, "outcome": "failed", "crash": {"path": "/workspaces/agentic-ecosystem/tests/test_architect_agent.py", "lineno": 191, "message": "KeyError: 'type'"}, "traceback": [{"path": "tests/test_architect_agent.py", "lineno": 191, "message": "in test_architecture_component_types"}], "stdout": "LLM Response received: 686 characters\nCleaned content preview: {\"components\": [{\"name\": \"API Gateway\", \"type\": \"gateway\", \"description\": \"test\", \"technologies\": [], \"responsibilities\": [], \"interfaces\": [], \"data_stores\": []}, {\"name\": \"User Service\", \"type\": \"mi...\nLLM call failed: Invalid LLM response format - missing technology_stack\nLLM error type: ValueError\n", "longrepr": "tests/test_architect_agent.py:191: in test_architecture_component_types\n    assert component[\"type\"] in valid_types\n           ^^^^^^^^^^^^^^^^^\nE   KeyError: 'type'"}, "teardown": {"duration": 0.0017859479999060568, "outcome": "passed"}}, {"nodeid": "tests/test_architect_agent.py::TestArchitectAgent::test_technology_stack_consistency", "lineno": 192, "outcome": "failed", "keywords": ["test_technology_stack_consistency", "TestArchitectAgent", "test_architect_agent.py", "tests", "agentic-ecosystem", ""], "setup": {"duration": 0.0002625799997986178, "outcome": "passed"}, "call": {"duration": 0.0014813409998168936, "outcome": "failed", "crash": {"path": "/workspaces/agentic-ecosystem/tests/test_architect_agent.py", "lineno": 234, "message": "KeyError: 'technologies'"}, "traceback": [{"path": "tests/test_architect_agent.py", "lineno": 234, "message": "in test_technology_stack_consistency"}], "stdout": "LLM Response received: 395 characters\nCleaned content preview: {\"components\": [{\"name\": \"Backend API\", \"type\": \"microservice\", \"description\": \"Main API service\", \"technologies\": [\"Python\", \"FastAPI\", \"PostgreSQL\"], \"responsibilities\": [\"API endpoints\"], \"interfac...\nLLM call failed: Invalid LLM response format - missing technology_stack\nLLM error type: ValueError\n", "longrepr": "tests/test_architect_agent.py:234: in test_technology_stack_consistency\n    for tech in component[\"technologies\"]:\n                ^^^^^^^^^^^^^^^^^^^^^^^^^\nE   KeyError: 'technologies'"}, "teardown": {"duration": 0.00037925600008748006, "outcome": "passed"}}, {"nodeid": "tests/test_architect_agent.py::TestArchitectAgent::test_security_considerations_coverage", "lineno": 238, "outcome": "failed", "keywords": ["test_security_considerations_coverage", "TestArchitectAgent", "test_architect_agent.py", "tests", "agentic-ecosystem", ""], "setup": {"duration": 0.0002882170001612394, "outcome": "passed"}, "call": {"duration": 0.0014028549999238749, "outcome": "failed", "crash": {"path": "/workspaces/agentic-ecosystem/tests/test_architect_agent.py", "lineno": 264, "message": "KeyError: 'security_considerations'"}, "traceback": [{"path": "tests/test_architect_agent.py", "lineno": 264, "message": "in test_security_considerations_coverage"}], "stdout": "LLM Response received: 314 characters\nCleaned content preview: {\"components\": [], \"architecture_patterns\": [], \"data_flow\": [], \"security_considerations\": [\"Authentication and authorization\", \"Data encryption in transit and at rest\", \"Input validation and sanitiz...\nLLM call failed: Invalid LLM response format - missing technology_stack\nLLM error type: ValueError\n", "longrepr": "tests/test_architect_agent.py:264: in test_security_considerations_coverage\n    security_text = \" \".join(result[\"security_considerations\"]).lower()\n                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   KeyError: 'security_considerations'"}, "teardown": {"duration": 0.0003854990000036196, "outcome": "passed"}}, {"nodeid": "tests/test_architect_agent.py::TestArchitectAgent::test_data_flow_completeness", "lineno": 274, "outcome": "failed", "keywords": ["test_data_flow_completeness", "TestArchitectAgent", "test_architect_agent.py", "tests", "agentic-ecosystem", ""], "setup": {"duration": 0.0003179519999321201, "outcome": "passed"}, "call": {"duration": 0.0014490309999928286, "outcome": "failed", "crash": {"path": "/workspaces/agentic-ecosystem/tests/test_architect_agent.py", "lineno": 309, "message": "KeyError: 'data_flow'"}, "traceback": [{"path": "tests/test_architect_agent.py", "lineno": 309, "message": "in test_data_flow_completeness"}], "stdout": "LLM Response received: 564 characters\nCleaned content preview: {\"components\": [{\"name\": \"Frontend\", \"type\": \"web_app\", \"description\": \"test\", \"technologies\": [], \"responsibilities\": [], \"interfaces\": [], \"data_stores\": []}, {\"name\": \"Backend\", \"type\": \"microservi...\nLLM call failed: Invalid LLM response format - missing technology_stack\nLLM error type: ValueError\n", "longrepr": "tests/test_architect_agent.py:309: in test_data_flow_completeness\n    data_flows = result[\"data_flow\"]\n                 ^^^^^^^^^^^^^^^^^^^\nE   KeyError: 'data_flow'"}, "teardown": {"duration": 0.00038308400007736054, "outcome": "passed"}}, {"nodeid": "tests/test_architect_agent.py::TestArchitectAgent::test_architecture_file_output", "lineno": 321, "outcome": "passed", "keywords": ["test_architecture_file_output", "TestArchitectAgent", "test_architect_agent.py", "tests", "agentic-ecosystem", ""], "setup": {"duration": 0.0003042969997295586, "outcome": "passed"}, "call": {"duration": 0.0014709010001752176, "outcome": "passed", "stdout": "LLM Response received: 249 characters\nCleaned content preview: {\"components\": [{\"name\": \"Test Component\", \"type\": \"microservice\", \"description\": \"test\", \"technologies\": [], \"responsibilities\": [], \"interfaces\": [], \"data_stores\": []}], \"architecture_patterns\": []...\nLLM call failed: Invalid LLM response format - missing technology_stack\nLLM error type: ValueError\n"}, "teardown": {"duration": 0.00038441600008809473, "outcome": "passed"}}, {"nodeid": "tests/test_architect_agent.py::TestArchitectAgent::test_architecture_patterns_validation", "lineno": 349, "outcome": "failed", "keywords": ["test_architecture_patterns_validation", "TestArchitectAgent", "test_architect_agent.py", "tests", "agentic-ecosystem", ""], "setup": {"duration": 0.00028107399975851877, "outcome": "passed"}, "call": {"duration": 0.001514303000021755, "outcome": "failed", "crash": {"path": "/workspaces/agentic-ecosystem/tests/test_architect_agent.py", "lineno": 377, "message": "KeyError: 'architecture_patterns'"}, "traceback": [{"path": "tests/test_architect_agent.py", "lineno": 377, "message": "in test_architecture_patterns_validation"}], "stdout": "LLM Response received: 286 characters\nCleaned content preview: {\"components\": [], \"architecture_patterns\": [{\"pattern\": \"Microservices\", \"rationale\": \"Enables independent scaling and deployment\"}, {\"pattern\": \"Event-Driven Architecture\", \"rationale\": \"Supports re...\nLLM call failed: Invalid LLM response format - missing technology_stack\nLLM error type: ValueError\n", "longrepr": "tests/test_architect_agent.py:377: in test_architecture_patterns_validation\n    patterns = result[\"architecture_patterns\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   KeyError: 'architecture_patterns'"}, "teardown": {"duration": 0.0003754800000024261, "outcome": "passed"}}, {"nodeid": "tests/test_architect_agent.py::TestArchitectAgent::test_error_handling", "lineno": 395, "outcome": "failed", "keywords": ["test_error_handling", "TestArchitectAgent", "test_architect_agent.py", "tests", "agentic-ecosystem", ""], "setup": {"duration": 0.0002920850001828512, "outcome": "passed"}, "call": {"duration": 0.00184522100016693, "outcome": "failed", "crash": {"path": "/workspaces/agentic-ecosystem/tests/test_architect_agent.py", "lineno": 408, "message": "AssertionError: assert 'error' in {'complexity_analysis': 'complex', 'components': [{'name': 'Frontend Application', 'responsibility': 'User interface and client-side logic', 'technology': 'React.js'}, {'name': 'Backend API', 'responsibility': 'Business logic and data processing', 'technology': 'Node.js'}, {'name': 'Database', 'responsibility': 'Data storage and retrieval', 'technology': 'PostgreSQL'}], 'created_at': '2025-08-16T17:06:55.107026', 'created_by': 'architect_agent', ...}"}, "traceback": [{"path": "tests/test_architect_agent.py", "lineno": 408, "message": "in test_error_handling"}], "stdout": "LLM call failed: API Error\nLLM error type: Exception\nAPI key issue detected - check OPENAI_API_KEY environment variable\n", "longrepr": "tests/test_architect_agent.py:408: in test_error_handling\n    assert \"error\" in result\nE   AssertionError: assert 'error' in {'complexity_analysis': 'complex', 'components': [{'name': 'Frontend Application', 'responsibility': 'User interface and client-side logic', 'technology': 'React.js'}, {'name': 'Backend API', 'responsibility': 'Business logic and data processing', 'technology': 'Node.js'}, {'name': 'Database', 'responsibility': 'Data storage and retrieval', 'technology': 'PostgreSQL'}], 'created_at': '2025-08-16T17:06:55.107026', 'created_by': 'architect_agent', ...}"}, "teardown": {"duration": 0.0005872550000276533, "outcome": "passed"}}]}